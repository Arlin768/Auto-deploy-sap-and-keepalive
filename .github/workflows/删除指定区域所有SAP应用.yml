name: 删除指定区域所有SAP应用

on:
  workflow_dispatch:  # 允许手动触发
    inputs:
      region:
        description: '选择要删除应用的区域 (SG 或 US)'
        required: true
        default: 'SG'
        type: choice
        options:
        - SG
        - US
      confirmation:
        description: '请输入 "确认删除" 以确认操作'
        required: true
        type: string

jobs:
  delete-apps:
    runs-on: ubuntu-latest
    name: Delete Apps from ${{ github.event.inputs.region }}
    
    steps:
    - name: 验证确认短语
      run: |
        if [ "${{ github.event.inputs.confirmation }}" != "确认删除" ]; then
          echo "错误：必须输入 '确认删除' 来确认操作"
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: 设置区域相关变量
      run: |
        if [ "${{ github.event.inputs.region }}" = "SG" ]; then
          echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
          echo "使用新加坡(SG)区域"
        else
          echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
          echo "使用美国(US)区域"
        fi

    - name: Login to Cloud Foundry and auto-detect org/space
      run: |
        # 首先进行基础登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        echo "自动检测可用的组织和空间..."
        
        # 获取所有可用的组织
        cf orgs > orgs.txt
        echo "可用组织:"
        cat orgs.txt
        
        # 自动选择第一个可用的组织（跳过标题行）
        SELECTED_ORG=$(cf orgs | grep -v "^name$" | grep -v "^Getting orgs" | grep -v "^$" | head -n 1 | awk '{print $1}')
        
        if [ -z "$SELECTED_ORG" ]; then
          echo "错误: 未找到可用的组织"
          exit 1
        fi
        
        echo "选择组织: $SELECTED_ORG"
        cf target -o "$SELECTED_ORG"
        
        # 获取该组织下的所有空间
        cf spaces > spaces.txt
        echo "可用空间:"
        cat spaces.txt
        
        # 自动选择第一个可用的空间
        SELECTED_SPACE=$(cf spaces | grep -v "^name$" | grep -v "^Getting spaces" | grep -v "^$" | head -n 1 | awk '{print $1}')
        
        if [ -z "$SELECTED_SPACE" ]; then
          echo "错误: 未找到可用的空间"
          exit 1
        fi
        
        echo "选择空间: $SELECTED_SPACE"
        cf target -s "$SELECTED_SPACE"
        
        # 显示当前目标信息
        echo "当前删除目标:"
        cf target
        
        # 将选择的组织和空间保存到环境变量中（用于后续步骤参考）
        echo "SELECTED_ORG=$SELECTED_ORG" >> $GITHUB_ENV
        echo "SELECTED_SPACE=$SELECTED_SPACE" >> $GITHUB_ENV

    - name: 获取所有应用
      id: get-apps
      run: |
        echo "扫描区域 ${{ github.event.inputs.region }} 中的所有应用..."
        echo "目标组织: ${{ env.SELECTED_ORG }}"
        echo "目标空间: ${{ env.SELECTED_SPACE }}"
        
        # 获取所有应用名称，使用 || true 防止命令失败
        apps=$(cf apps 2>/dev/null | awk 'NR>3 {print $1}' | grep -v '^

    - name: 删除所有应用
      if: steps.get-apps.outputs.has_apps == 'true'
      run: |
        # 从上一步获取应用列表
        apps="${{ steps.get-apps.outputs.apps }}"
        
        echo "警告: 即将删除区域 ${{ github.event.inputs.region }} 中的所有应用"
        echo "目标组织: ${{ env.SELECTED_ORG }}"
        echo "目标空间: ${{ env.SELECTED_SPACE }}"
        echo "应用列表:"
        echo "$apps"
        echo "----------------------------------------"
        
        # 删除每个应用
        success_count=0
        failure_count=0
        
        for app in $apps; do
          echo "正在删除应用: $app"
          
          if cf delete -f -r "$app"; then  # -f 强制删除，不需要确认；-r 同时删除关联的路由
            echo "应用 $app 删除成功"
            success_count=$((success_count + 1))
          else
            echo "应用 $app 删除失败"
            failure_count=$((failure_count + 1))
          fi
          
          echo "----------------------------------------"
          sleep 5  # 每个应用之间等待 5 秒
        done
        
        echo "删除操作完成"
        echo "成功删除: $success_count 个应用"
        echo "删除失败: $failure_count 个应用"

    - name: 验证应用已删除
      run: |
        echo "验证删除结果..."
        echo "区域 ${{ github.event.inputs.region }} 中剩余的应用:"
        echo "组织: ${{ env.SELECTED_ORG }}"
        echo "空间: ${{ env.SELECTED_SPACE }}"
        echo "----------------------------------------"
        
        # 使用 || true 防止 cf apps 在没有应用时返回非零退出码
        cf apps || true
        
        # 检查是否还有剩余应用，忽略命令的退出状态
        remaining_apps=$(cf apps 2>/dev/null | awk 'NR>3 {print $1}' | grep -v '^ || true)
        
        if [ -z "$remaining_apps" ]; then
          echo "确认: 区域 ${{ github.event.inputs.region }} 中所有应用已成功删除"
        else
          echo "警告: 区域 ${{ github.event.inputs.region }} 中仍有以下应用未删除:"
          echo "$remaining_apps"
        fi || true)
        
        echo "发现的应用:"
        if [ -z "$apps" ]; then
          echo "(无应用)"
        else
          echo "$apps"
        fi
        
        # 检查是否有应用
        if [ -z "$apps" ]; then
          echo "在区域 ${{ github.event.inputs.region }} 中未找到任何应用"
          echo "has_apps=false" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "has_apps=true" >> $GITHUB_OUTPUT
          # 统计应用数量
          app_count=$(echo "$apps" | wc -l)
          echo "总共发现 $app_count 个应用"
        fi
        
        # 直接输出到 GITHUB_OUTPUT（多行字符串）
        echo "apps<<EOF" >> $GITHUB_OUTPUT
        echo "$apps" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 删除所有应用
      if: steps.get-apps.outputs.has_apps == 'true'
      run: |
        # 从上一步获取应用列表
        apps="${{ steps.get-apps.outputs.apps }}"
        
        echo "警告: 即将删除区域 ${{ github.event.inputs.region }} 中的所有应用"
        echo "目标组织: ${{ env.SELECTED_ORG }}"
        echo "目标空间: ${{ env.SELECTED_SPACE }}"
        echo "应用列表:"
        echo "$apps"
        echo "----------------------------------------"
        
        # 删除每个应用
        success_count=0
        failure_count=0
        
        for app in $apps; do
          echo "正在删除应用: $app"
          
          if cf delete -f -r "$app"; then  # -f 强制删除，不需要确认；-r 同时删除关联的路由
            echo "应用 $app 删除成功"
            success_count=$((success_count + 1))
          else
            echo "应用 $app 删除失败"
            failure_count=$((failure_count + 1))
          fi
          
          echo "----------------------------------------"
          sleep 5  # 每个应用之间等待 5 秒
        done
        
        echo "删除操作完成"
        echo "成功删除: $success_count 个应用"
        echo "删除失败: $failure_count 个应用"

    - name: 验证应用已删除
      run: |
        echo "验证删除结果..."
        echo "区域 ${{ github.event.inputs.region }} 中剩余的应用:"
        echo "组织: ${{ env.SELECTED_ORG }}"
        echo "空间: ${{ env.SELECTED_SPACE }}"
        echo "----------------------------------------"
        
        # 使用 || true 防止 cf apps 在没有应用时返回非零退出码
        cf apps || true
        
        # 检查是否还有剩余应用，忽略命令的退出状态
        remaining_apps=$(cf apps 2>/dev/null | awk 'NR>3 {print $1}' | grep -v '^ || true)
        
        if [ -z "$remaining_apps" ]; then
          echo "确认: 区域 ${{ github.event.inputs.region }} 中所有应用已成功删除"
        else
          echo "警告: 区域 ${{ github.event.inputs.region }} 中仍有以下应用未删除:"
          echo "$remaining_apps"
        fi
